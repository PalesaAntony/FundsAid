'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormDefaultProps = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};
var reop = function reop(d) {
  return d;
};

var FormDefaultProps = exports.FormDefaultProps = {
  loadState: noop,
  defaultValues: {},
  preValidate: reop,
  validate: function validate() {
    return null;
  },
  onValidationFail: noop,
  onChange: noop,
  saveState: noop,
  willUnmount: noop,
  preSubmit: reop,
  onSubmit: noop,
  postSubmit: noop
};

var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form(props) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

    _this.setAllValues = _this.setAllValues.bind(_this);
    _this.setValue = _this.setValue.bind(_this);
    _this.getValue = _this.getValue.bind(_this);
    _this.setNestedError = _this.setNestedError.bind(_this);
    _this.getError = _this.getError.bind(_this);
    _this.setTouched = _this.setTouched.bind(_this);
    _this.getTouched = _this.getTouched.bind(_this);
    _this.addValue = _this.addValue.bind(_this);
    _this.removeValue = _this.removeValue.bind(_this);
    _this.swapValues = _this.swapValues.bind(_this);
    _this.setAllTouched = _this.setAllTouched.bind(_this);
    _this.resetForm = _this.resetForm.bind(_this);
    _this.submitForm = _this.submitForm.bind(_this);
    _this.getDefaultState = _this.getDefaultState.bind(_this); // using 'Default' since `Initial` will now throw deprecation warnings

    _this.state = _this.getDefaultState();
    return _this;
  }

  _createClass(Form, [{
    key: 'getDefaultState',
    value: function getDefaultState() {
      var _props = this.props,
          defaultValues = _props.defaultValues,
          values = _props.values,
          loadState = _props.loadState;


      var mergedValues = _extends({}, defaultValues, values);

      return loadState(this.props, this) || {
        values: mergedValues,
        touched: {},
        errors: {},
        nestedErrors: {}
      };
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        formAPI: this.getAPI()
      };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.emitChange(this.state, true);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var defaultValues = props.defaultValues,
          values = props.values;

      if (this.props.defaultValues === defaultValues && this.props.values === values) {
        return;
      }

      var mergedValues = this.props.defaultValues === defaultValues ? values : _extends({}, defaultValues, values);

      this.setFormState({
        values: mergedValues || {}
      }, true);
    }
  }, {
    key: 'componentWillUmount',
    value: function componentWillUmount() {
      this.props.willUnmount(this.state, this.props, this);
    }

    // API

  }, {
    key: 'setAllValues',
    value: function setAllValues(values, noTouch) {
      if (noTouch) {
        return this.setFormState({ values: values });
      }
      this.setFormState({ values: values, touched: {} });
    }
  }, {
    key: 'setValue',
    value: function setValue(field, value, noTouch) {
      var state = this.state;
      var values = _utils2.default.set(state.values, field, value);
      // Also set touched since the value is changing
      if (noTouch) {
        return this.setFormState({ values: values });
      }
      var touched = _utils2.default.set(state.touched, field);
      this.setFormState({ values: values, touched: touched });
    }
  }, {
    key: 'getValue',
    value: function getValue(field, fallback) {
      var state = this.state;
      var val = _utils2.default.get(state.values, field);
      return typeof val !== 'undefined' ? val : fallback;
    }
  }, {
    key: 'setNestedError',
    value: function setNestedError(field) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var nestedErrors = _utils2.default.set(this.state.nestedErrors, field, value);
      this.setFormState({ nestedErrors: nestedErrors });
    }
  }, {
    key: 'getError',
    value: function getError(field) {
      return _utils2.default.get(this.state.errors, field);
    }
  }, {
    key: 'setTouched',
    value: function setTouched(field) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var touched = _utils2.default.set(this.state.touched, field, value);
      this.setFormState({ touched: touched });
    }
  }, {
    key: 'getTouched',
    value: function getTouched(field) {
      var state = this.state;
      if (this.state.dirty === true || this.props.touched === true) {
        return true;
      }
      return _utils2.default.get(state.touched, field);
    }
  }, {
    key: 'addValue',
    value: function addValue(field, value) {
      var state = this.state;
      var values = _utils2.default.set(state.values, field, [].concat(_toConsumableArray(_utils2.default.get(state.values, field, [])), [value]));
      this.setFormState({ values: values });
    }
  }, {
    key: 'removeValue',
    value: function removeValue(field, index) {
      var state = this.state;
      var fieldValue = _utils2.default.get(state.values, field, []);
      var values = _utils2.default.set(state.values, field, [].concat(_toConsumableArray(fieldValue.slice(0, index)), _toConsumableArray(fieldValue.slice(index + 1))));
      this.setFormState({ values: values });
    }
  }, {
    key: 'swapValues',
    value: function swapValues(field, index, destIndex) {
      var state = this.state;

      var min = Math.min(index, destIndex);
      var max = Math.max(index, destIndex);

      var fieldValues = _utils2.default.get(state.values, field, []);
      var values = _utils2.default.set(state.values, field, [].concat(_toConsumableArray(fieldValues.slice(0, min)), [fieldValues[max]], _toConsumableArray(fieldValues.slice(min + 1, max)), [fieldValues[min]], _toConsumableArray(fieldValues.slice(max + 1))));
      this.setFormState({ values: values });
    }
  }, {
    key: 'setAllTouched',
    value: function setAllTouched() {
      var dirty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var state = arguments[1];

      this.setFormState(_extends({}, state, {
        dirty: !!dirty
      }));
    }
  }, {
    key: 'resetForm',
    value: function resetForm() {
      return this.setFormState(this.getDefaultState(), true);
    }
  }, {
    key: 'submitForm',
    value: function submitForm(e) {
      e && e.preventDefault && e.preventDefault(e);
      var state = this.state;
      var errors = this.validate(state.values, state, this.props);
      if (errors) {
        if (!state.dirty) {
          this.setAllTouched(true, { errors: errors });
        }
        return this.props.onValidationFail(state.values, state, this.props, this);
      }
      var preSubmitValues = this.props.preSubmit(state.values, state, this.props, this);
      this.props.onSubmit(preSubmitValues, state, this.props, this);
      this.props.postSubmit(preSubmitValues, state, this.props, this);
    }

    // Utils

  }, {
    key: 'getAPI',
    value: function getAPI() {
      return {
        setAllValues: this.setAllValues,
        setValue: this.setValue,
        getValue: this.getValue,
        setNestedError: this.setNestedError,
        getError: this.getError,
        setTouched: this.setTouched,
        getTouched: this.getTouched,
        addValue: this.addValue,
        removeValue: this.removeValue,
        swapValues: this.swapValues,
        setAllTouched: this.setAllTouched,
        resetForm: this.resetForm,
        submitForm: this.submitForm
      };
    }
  }, {
    key: 'setFormState',
    value: function setFormState(newState, silent) {
      var _this2 = this;

      if (newState && newState.values && !newState.errors) {
        newState.values = this.props.preValidate(newState.values, newState, this.props, this);
        newState.errors = this.validate(newState.values, newState, this.props);
      }
      this.setState(newState, function () {
        _this2.props.saveState(_this2.state, _this2.props, _this2);
        if (!silent) {
          _this2.emitChange(_this2.state, _this2.props);
        }
      });
    }
  }, {
    key: 'emitChange',
    value: function emitChange(state, initial) {
      this.props.onChange(state, this.props, initial, this);
    }
  }, {
    key: 'validate',
    value: function validate(values, state, props) {
      var errors = this.props.validate(removeNestedErrorValues(values, this.state ? this.state.nestedErrors : {}), state, props, this);
      return cleanErrors(errors);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = _extends({}, this.props, this.state, this.getAPI());

      var children = props.children,
          rest = _objectWithoutProperties(props, ['children']);

      var resolvedChild = typeof children === 'function' ? children(rest) : children;
      return resolvedChild;
    }
  }]);

  return Form;
}(_react2.default.Component);

Form.defaultProps = FormDefaultProps;
Form.childContextTypes = { formAPI: _propTypes2.default.object };
exports.default = Form;

// Utils

function cleanErrors(err) {
  if (_utils2.default.isObject(err)) {
    var resolved = _utils2.default.mapValues(err, cleanErrors);
    var found = _utils2.default.pickBy(resolved, function (d) {
      return d;
    });
    return Object.keys(found).length ? resolved : undefined;
  }
  if (_utils2.default.isArray(err)) {
    var _resolved = err.map(cleanErrors);
    var _found = _resolved.find(function (d) {
      return d;
    });
    return _found ? _resolved : undefined;
  }
  return err;
}

// removeNestedErrorValues recurses the values object and turns any
// field that has a truthy corresponding nested form error field into undefined.
// This allows properly validating a nested form by detecting that undefined value
// in the validation function
function removeNestedErrorValues(values, nestedErrors) {
  var recurse = function recurse(current) {
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (_utils2.default.isObject(current)) {
      return _utils2.default.mapValues(current, function (d, i) {
        return recurse(d, [].concat(_toConsumableArray(path), [i]));
      });
    }
    if (_utils2.default.isArray(current)) {
      return current.map(function (d, key) {
        return recurse(d, [].concat(_toConsumableArray(path), [key]));
      });
    }
    if (!_utils2.default.isObject(current) && !_utils2.default.isArray(current) && current) {
      return _utils2.default.set(values, path, undefined);
    }
    return current;
  };
  recurse(nestedErrors);
  return values;
}
//# sourceMappingURL=data:application/json;base64,